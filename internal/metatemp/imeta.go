/**
 * @Author:  jager
 * @Email:   lhj168os@gmail.com
 * @File:    meta
 * @Date:    2022/3/8 5:33 下午
 * @package: metago
 * @Version: v1.0.0
 *
 * @Description:
 *
 */

package metatemp

import "fmt"

const iMeta = `// Code generated by metactl. DO NOT EDIT.
// source: metactl

package meta

import (
	"errors"
	"fmt"
	"reflect"
	"runtime"

	"%s"

	pb "%s"
)

var metaData = make(map[pb.%s]iMeta)

var NotRegistryMetaErr = errors.New("NotRegistryMetaErr")

type iMeta interface {
	getMsgID() pb.%s
	encodeArg(interface{}) ([]byte, error)
	decodeArg([]byte) (interface{}, error)
	encodeReply(interface{}) ([]byte, error)
	decodeReply([]byte) (interface{}, error)
	handle(session sess.ISession, arg interface{}) (interface{}, error)
}

func registerMeta(meta iMeta) {
	metaData[meta.getMsgID()] = meta
}

func getMeta(msgId pb.%s) (iMeta, error) {
	if m, ok := metaData[msgId]; ok {
		return m, nil
	} else {
		return nil, NotRegistryMetaErr
	}
}

func AllRegisteredMsgid() []int32 {
	var msgids []int32
	for id := range metaData {
		msgids = append(msgids, int32(id))
	}
	return msgids
}

func Call(session sess.ISession, msgid pb.%s, data []byte) ([]byte, error) {
	im, err := getMeta(msgid)
	if err != nil {
		return nil, err
	}
	arg, err := im.decodeArg(data)
	if err != nil {
		return nil, err
	}
	
	var resp interface{}
	err = catchPanic(func() error {
		resp, err = im.handle(session, arg)
		return err
	})
	if err != nil {
		return nil, err
	}

	return im.encodeReply(resp)
}

func catchPanic(f func() error) (err error) {
	defer func() {
		err1 := recover()
		if err1 != nil {
			fn := runtime.FuncForPC(reflect.ValueOf(f).Pointer()).Name()
			err = errors.New(fmt.Sprintf("%s call err: %v", fn, err1))
		}
	}()

	err = f()

	return
}
`

func GenIMetaFile(enumName, basePath, inPkg string) string {
	return fmt.Sprintf(iMeta, basePath, inPkg, enumName, enumName, enumName, enumName)
}
